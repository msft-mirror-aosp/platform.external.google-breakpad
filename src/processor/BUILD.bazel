# Copyright 2024 - The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the',  help='License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an',  help='AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Description:
#   Breakpad is a set of client and server components which implement a
#   crash-reporting system.
load("//:copts.bzl", "BREAKPAD_COMMON_COPTS")

cc_library(
    name = "hdrs",
    hdrs = glob(["*.h"]),
    include_prefix = "processor",
    visibility = ["//visibility:private"],
)

cc_library(
    name = "processor",
    srcs = [
        "basic_code_modules.cc",
        "basic_source_line_resolver.cc",
        "call_stack.cc",
        "cfi_frame_info.cc",
        "convert_old_arm64_context.cc",
        "disassembler_x86.cc",
        "dump_context.cc",
        "dump_object.cc",
        "exploitability.cc",
        "exploitability_linux.cc",
        "exploitability_win.cc",
        "fast_source_line_resolver.cc",
        "logging.cc",
        "microdump.cc",
        "microdump_processor.cc",
        "minidump.cc",
        "module_comparer.cc",
        "module_serializer.cc",
        "pathname_stripper.cc",
        "proc_maps_linux.cc",
        "process_state.cc",
        "simple_symbol_supplier.cc",
        "source_line_resolver_base.cc",
        "stack_frame_cpu.cc",
        "stack_frame_symbolizer.cc",
        "stackwalk_common.cc",
        "stackwalker.cc",
        "stackwalker_address_list.cc",
        "stackwalker_amd64.cc",
        "stackwalker_arm.cc",
        "stackwalker_arm64.cc",
        "stackwalker_mips.cc",
        "stackwalker_ppc.cc",
        "stackwalker_ppc64.cc",
        "stackwalker_riscv.cc",
        "stackwalker_riscv64.cc",
        "stackwalker_sparc.cc",
        "stackwalker_x86.cc",
        "symbolic_constants_win.cc",
        "synth_minidump.cc",
        "tokenize.cc",
    ] + select({
        "@platforms//os:linux": [
            "disassembler_objdump.cc",
        ],
        "//conditions:default": [],
    }),
    copts = BREAKPAD_COMMON_COPTS,
    local_defines = ["BPLOG_MINIMUM_SEVERITY=SEVERITY_CRITICAL"] + select({
        "@platforms//os:linux": ["O_TMPFILE=020100000"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":hdrs",
        "//src/common",
        "//src/third_party/libdisasm",
    ],
)

processor_tests = [
    # "basic_source_line_resolver_unittest", # Needs test files
    "cfi_frame_info_unittest",
    "disassembler_x86_unittest",
    # "fast_source_line_resolver_unittest",  # Needs test files
    "map_serializers_unittest",
    # "microdump_processor_unittest",# Needs test files
    # "minidump_unittest", # Needs test files
    "range_map_truncate_upper_unittest",
    "stackwalker_address_list_unittest",
    "stackwalker_amd64_unittest",
    "stackwalker_arm64_unittest",
    "stackwalker_arm_unittest",
    "stackwalker_x86_unittest",
    "static_address_map_unittest",
    "static_contained_range_map_unittest",
    "static_map_unittest",
    "static_range_map_unittest",
    "synth_minidump_unittest",
]

## Create all the tests.
[
    cc_test(
        name = name,
        srcs = [name + ".cc"],
        deps = [
            ":processor",
            "//src:test_headers",
            "@com_google_googletest//:gtest_main",
        ],
    )
    for name in processor_tests
]

test_suite(
    name = "processor_tests",
    tests = processor_tests,
)
